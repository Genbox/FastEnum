// <auto-generated />
#nullable enable
using System;

[Flags]
public enum MyEnum1Format : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

public static partial class Enums
{
    internal static partial class MyEnum1
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "NotFirst"
            };

        public static global::MyEnum1[] GetMemberValues() => _values ??= new global::MyEnum1[] {
                global::MyEnum1.First
            };

        public static Int32[] GetUnderlyingValues() => _underlyingValues ??= new Int32[] {
                0
            };

        public static bool TryParse(string value, out global::MyEnum1 result, MyEnum1Format format = MyEnum1Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum1Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum1.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum1Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum1.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out global::MyEnum1 result, MyEnum1Format format = MyEnum1Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum1Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum1.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum1Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum1.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static global::MyEnum1 Parse(ReadOnlySpan<char> value, MyEnum1Format format = MyEnum1Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum1 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static global::MyEnum1 Parse(string value, MyEnum1Format format = MyEnum1Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum1 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(global::MyEnum1 input)
        {
            Int32[] _isDefinedValues = GetUnderlyingValues();

            for (int i = 0; i < _isDefinedValues.Length; i++)
            {
                if (_isDefinedValues[i] == (Int32)input)
                    return true;
            }

            return false;
        }

        private static string[]? _names;
        private static global::MyEnum1[]? _values;
        private static Int32[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

internal static partial class MyEnum1Extensions
{
    public static string GetString(this global::MyEnum1 value) => value switch
    {
        global::MyEnum1.First => "NotFirst",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this global::MyEnum1 value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case global::MyEnum1.First:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this global::MyEnum1 value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
// <auto-generated />
#nullable enable
using System;

[Flags]
public enum MyEnum2Format : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

public static partial class Enums
{
    internal static partial class MyEnum2
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "FIRST"
            };

        public static global::MyEnum2[] GetMemberValues() => _values ??= new global::MyEnum2[] {
                global::MyEnum2.First
            };

        public static Int32[] GetUnderlyingValues() => _underlyingValues ??= new Int32[] {
                0
            };

        public static bool TryParse(string value, out global::MyEnum2 result, MyEnum2Format format = MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum2Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum2.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum2Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum2.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out global::MyEnum2 result, MyEnum2Format format = MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum2Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum2.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum2Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum2.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static global::MyEnum2 Parse(ReadOnlySpan<char> value, MyEnum2Format format = MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum2 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static global::MyEnum2 Parse(string value, MyEnum2Format format = MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum2 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(global::MyEnum2 input)
        {
            Int32[] _isDefinedValues = GetUnderlyingValues();

            for (int i = 0; i < _isDefinedValues.Length; i++)
            {
                if (_isDefinedValues[i] == (Int32)input)
                    return true;
            }

            return false;
        }

        private static string[]? _names;
        private static global::MyEnum2[]? _values;
        private static Int32[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

internal static partial class MyEnum2Extensions
{
    public static string GetString(this global::MyEnum2 value) => value switch
    {
        global::MyEnum2.First => "FIRST",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this global::MyEnum2 value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case global::MyEnum2.First:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this global::MyEnum2 value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
// <auto-generated />
#nullable enable
using System;

[Flags]
public enum MyEnum3Format : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

public static partial class Enums
{
    internal static partial class MyEnum3
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "Last"
            };

        public static global::MyEnum3[] GetMemberValues() => _values ??= new global::MyEnum3[] {
                global::MyEnum3.First
            };

        public static Int32[] GetUnderlyingValues() => _underlyingValues ??= new Int32[] {
                0
            };

        public static bool TryParse(string value, out global::MyEnum3 result, MyEnum3Format format = MyEnum3Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum3Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum3.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum3Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum3.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out global::MyEnum3 result, MyEnum3Format format = MyEnum3Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum3Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum3.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum3Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum3.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static global::MyEnum3 Parse(ReadOnlySpan<char> value, MyEnum3Format format = MyEnum3Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum3 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static global::MyEnum3 Parse(string value, MyEnum3Format format = MyEnum3Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum3 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(global::MyEnum3 input)
        {
            Int32[] _isDefinedValues = GetUnderlyingValues();

            for (int i = 0; i < _isDefinedValues.Length; i++)
            {
                if (_isDefinedValues[i] == (Int32)input)
                    return true;
            }

            return false;
        }

        private static string[]? _names;
        private static global::MyEnum3[]? _values;
        private static Int32[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

internal static partial class MyEnum3Extensions
{
    public static string GetString(this global::MyEnum3 value) => value switch
    {
        global::MyEnum3.First => "Last",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this global::MyEnum3 value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case global::MyEnum3.First:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this global::MyEnum3 value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
// <auto-generated />
#nullable enable
using System;

[Flags]
public enum MyEnum4Format : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

public static partial class Enums
{
    internal static partial class MyEnum4
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "fIRST"
            };

        public static global::MyEnum4[] GetMemberValues() => _values ??= new global::MyEnum4[] {
                global::MyEnum4.First
            };

        public static Int32[] GetUnderlyingValues() => _underlyingValues ??= new Int32[] {
                0
            };

        public static bool TryParse(string value, out global::MyEnum4 result, MyEnum4Format format = MyEnum4Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum4Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum4.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum4Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum4.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out global::MyEnum4 result, MyEnum4Format format = MyEnum4Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(MyEnum4Format.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = global::MyEnum4.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnum4Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::MyEnum4.First;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static global::MyEnum4 Parse(ReadOnlySpan<char> value, MyEnum4Format format = MyEnum4Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum4 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static global::MyEnum4 Parse(string value, MyEnum4Format format = MyEnum4Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::MyEnum4 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(global::MyEnum4 input)
        {
            Int32[] _isDefinedValues = GetUnderlyingValues();

            for (int i = 0; i < _isDefinedValues.Length; i++)
            {
                if (_isDefinedValues[i] == (Int32)input)
                    return true;
            }

            return false;
        }

        private static string[]? _names;
        private static global::MyEnum4[]? _values;
        private static Int32[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

internal static partial class MyEnum4Extensions
{
    public static string GetString(this global::MyEnum4 value) => value switch
    {
        global::MyEnum4.First => "fIRST",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this global::MyEnum4 value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case global::MyEnum4.First:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this global::MyEnum4 value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
