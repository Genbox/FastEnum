// <auto-generated />
#nullable enable
using System;

namespace Some.Namespace.Here;

[Flags]
public enum MyEnumFormat : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

namespace Some.Namespace.Here;

public static partial class Enums
{
    public static partial class MyEnum
    {
        public const int MemberCount = 4;
        public const bool IsFlagEnum = true;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "First",
                "Second",
                "Third",
                "Other"
            };

        public static Some.Namespace.Here.MyEnum[] GetMemberValues() => _values ??= new Some.Namespace.Here.MyEnum[] {
                Some.Namespace.Here.MyEnum.First,
                Some.Namespace.Here.MyEnum.Second,
                Some.Namespace.Here.MyEnum.Third,
                Some.Namespace.Here.MyEnum.Other
            };

        public static Int32[] GetUnderlyingValues() => _underlyingValues ??= new Int32[] {
                0,
                2,
                8,
                256
            };

        public static bool TryParse(string value, out Some.Namespace.Here.MyEnum result, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.First;
                    return true;
                }

                if (value.Equals("Second", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Second;
                    return true;
                }

                if (value.Equals("Third", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Third;
                    return true;
                }

                if (value.Equals("Other", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Other;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.First;
                    return true;
                }

                if (value.Equals("2", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Second;
                    return true;
                }

                if (value.Equals("8", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Third;
                    return true;
                }

                if (value.Equals("256", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Other;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out Some.Namespace.Here.MyEnum result, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.First;
                    return true;
                }

                if (value.Equals("Second", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Second;
                    return true;
                }

                if (value.Equals("Third", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Third;
                    return true;
                }

                if (value.Equals("Other", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Other;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.First;
                    return true;
                }

                if (value.Equals("2", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Second;
                    return true;
                }

                if (value.Equals("8", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Third;
                    return true;
                }

                if (value.Equals("256", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Other;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static Some.Namespace.Here.MyEnum Parse(ReadOnlySpan<char> value, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static Some.Namespace.Here.MyEnum Parse(string value, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(Some.Namespace.Here.MyEnum input)
        {
            return unchecked(((Int32)266UL & (Int32)input) == (Int32)input);
        }

        private static string[]? _names;
        private static Some.Namespace.Here.MyEnum[]? _values;
        private static Int32[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

namespace Some.Namespace.Here;

public static partial class MyEnumExtensions
{
    public static string GetString(this Some.Namespace.Here.MyEnum value) => value switch
    {
        Some.Namespace.Here.MyEnum.First => "First",
        Some.Namespace.Here.MyEnum.Second => "Second",
        Some.Namespace.Here.MyEnum.Third => "Third",
        Some.Namespace.Here.MyEnum.Other => "Other",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this Some.Namespace.Here.MyEnum value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case Some.Namespace.Here.MyEnum.First:
                underlyingValue = 0;
                return true;
            case Some.Namespace.Here.MyEnum.Second:
                underlyingValue = 2;
                return true;
            case Some.Namespace.Here.MyEnum.Third:
                underlyingValue = 8;
                return true;
            case Some.Namespace.Here.MyEnum.Other:
                underlyingValue = 256;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this Some.Namespace.Here.MyEnum value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }

    public static bool IsFlagSet(this Some.Namespace.Here.MyEnum value, Some.Namespace.Here.MyEnum flag) => ((Int32)value & (Int32)flag) == (Int32)flag;
}
