// <auto-generated />
#nullable enable
using System;

namespace Some.Namespace.Here;

[Flags]
public enum MyEnumFormat : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

namespace Some.Namespace.Here;

public static partial class Enums
{
    public static partial class MyEnum
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "Value"
            };

        public static Some.Namespace.Here.MyEnum[] GetMemberValues() => _values ??= new Some.Namespace.Here.MyEnum[] {
                Some.Namespace.Here.MyEnum.Value
            };

        public static Byte[] GetUnderlyingValues() => _underlyingValues ??= new Byte[] {
                0
            };

        public static bool TryParse(string value, out Some.Namespace.Here.MyEnum result, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Name))
            {
                if (value.Equals("Value", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out Some.Namespace.Here.MyEnum result, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Name))
            {
                if (value.Equals("Value", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static Some.Namespace.Here.MyEnum Parse(ReadOnlySpan<char> value, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static Some.Namespace.Here.MyEnum Parse(string value, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(Some.Namespace.Here.MyEnum input)
        {
            Byte[] _isDefinedValues = GetUnderlyingValues();

            for (int i = 0; i < _isDefinedValues.Length; i++)
            {
                if (_isDefinedValues[i] == (Byte)input)
                    return true;
            }

            return false;
        }

        private static string[]? _names;
        private static Some.Namespace.Here.MyEnum[]? _values;
        private static Byte[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

namespace Some.Namespace.Here;

public static partial class MyEnumExtensions
{
    public static string GetString(this Some.Namespace.Here.MyEnum value) => value switch
    {
        Some.Namespace.Here.MyEnum.Value => "Value",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this Some.Namespace.Here.MyEnum value, out Byte underlyingValue)
    {
        switch (value)
        {
            case Some.Namespace.Here.MyEnum.Value:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Byte GetUnderlyingValue(this Some.Namespace.Here.MyEnum value)
    {
        if (!TryGetUnderlyingValue(value, out Byte underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
// <auto-generated />
#nullable enable
using System;

namespace Some.Namespace.Here;

[Flags]
public enum MyEnum2Format : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

namespace Some.Namespace.Here;

public static partial class Enums
{
    public static partial class MyEnum2
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "Value"
            };

        public static Some.Namespace.Here.MyEnum2[] GetMemberValues() => _values ??= new Some.Namespace.Here.MyEnum2[] {
                Some.Namespace.Here.MyEnum2.Value
            };

        public static UInt64[] GetUnderlyingValues() => _underlyingValues ??= new UInt64[] {
                0
            };

        public static bool TryParse(string value, out Some.Namespace.Here.MyEnum2 result, Some.Namespace.Here.MyEnum2Format format = Some.Namespace.Here.MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(Some.Namespace.Here.MyEnum2Format.Name))
            {
                if (value.Equals("Value", comparison))
                {
                    result = Some.Namespace.Here.MyEnum2.Value;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnum2Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum2.Value;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out Some.Namespace.Here.MyEnum2 result, Some.Namespace.Here.MyEnum2Format format = Some.Namespace.Here.MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(Some.Namespace.Here.MyEnum2Format.Name))
            {
                if (value.Equals("Value", comparison))
                {
                    result = Some.Namespace.Here.MyEnum2.Value;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnum2Format.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum2.Value;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static Some.Namespace.Here.MyEnum2 Parse(ReadOnlySpan<char> value, Some.Namespace.Here.MyEnum2Format format = Some.Namespace.Here.MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum2 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static Some.Namespace.Here.MyEnum2 Parse(string value, Some.Namespace.Here.MyEnum2Format format = Some.Namespace.Here.MyEnum2Format.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum2 result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(Some.Namespace.Here.MyEnum2 input)
        {
            UInt64[] _isDefinedValues = GetUnderlyingValues();

            for (int i = 0; i < _isDefinedValues.Length; i++)
            {
                if (_isDefinedValues[i] == (UInt64)input)
                    return true;
            }

            return false;
        }

        private static string[]? _names;
        private static Some.Namespace.Here.MyEnum2[]? _values;
        private static UInt64[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

namespace Some.Namespace.Here;

public static partial class MyEnum2Extensions
{
    public static string GetString(this Some.Namespace.Here.MyEnum2 value) => value switch
    {
        Some.Namespace.Here.MyEnum2.Value => "Value",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this Some.Namespace.Here.MyEnum2 value, out UInt64 underlyingValue)
    {
        switch (value)
        {
            case Some.Namespace.Here.MyEnum2.Value:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static UInt64 GetUnderlyingValue(this Some.Namespace.Here.MyEnum2 value)
    {
        if (!TryGetUnderlyingValue(value, out UInt64 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
