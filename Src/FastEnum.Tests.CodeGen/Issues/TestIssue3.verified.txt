// <auto-generated />
#nullable enable
using System;

[Flags]
internal enum TestEnumFormat : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable
using System;

internal static partial class Enums
{
    internal static partial class TestEnum
    {
        public const int MemberCount = 2;
        public const bool IsFlagEnum = false;

        public static string[] GetMemberNames() => _names ??= new string[] {
                "None",
                "Value"
            };

        public static global::TestEnum[] GetMemberValues() => _values ??= new global::TestEnum[] {
                global::TestEnum.None,
                global::TestEnum.Value
            };

        public static Int32[] GetUnderlyingValues() => _underlyingValues ??= new Int32[] {
                0,
                1
            };

        public static bool TryParse(string value, out global::TestEnum result, TestEnumFormat format = TestEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(TestEnumFormat.Name))
            {
                if (value.Equals("None", comparison))
                {
                    result = global::TestEnum.None;
                    return true;
                }

                if (value.Equals("Value", comparison))
                {
                    result = global::TestEnum.Value;
                    return true;
                }
            }
            if (format.HasFlag(TestEnumFormat.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::TestEnum.None;
                    return true;
                }

                if (value.Equals("1", comparison))
                {
                    result = global::TestEnum.Value;
                    return true;
                }
            }
            result = default;
            return false;
        }

#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
        public static bool TryParse(ReadOnlySpan<char> value, out global::TestEnum result, TestEnumFormat format = TestEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (format.HasFlag(TestEnumFormat.Name))
            {
                if (value.Equals("None", comparison))
                {
                    result = global::TestEnum.None;
                    return true;
                }

                if (value.Equals("Value", comparison))
                {
                    result = global::TestEnum.Value;
                    return true;
                }
            }
            if (format.HasFlag(TestEnumFormat.Value))
            {
                if (value.Equals("0", comparison))
                {
                    result = global::TestEnum.None;
                    return true;
                }

                if (value.Equals("1", comparison))
                {
                    result = global::TestEnum.Value;
                    return true;
                }
            }
            result = default;
            return false;
        }

        public static global::TestEnum Parse(ReadOnlySpan<char> value, TestEnumFormat format = TestEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::TestEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value.ToString()}");

            return result;
        }
#endif

        public static global::TestEnum Parse(string value, TestEnumFormat format = TestEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out global::TestEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(global::TestEnum input)
        {
            Int32[] _isDefinedValues = GetUnderlyingValues();

            for (int i = 0; i < _isDefinedValues.Length; i++)
            {
                if (_isDefinedValues[i] == (Int32)input)
                    return true;
            }

            return false;
        }

        private static string[]? _names;
        private static global::TestEnum[]? _values;
        private static Int32[]? _underlyingValues;

    }
}
// <auto-generated />
#nullable enable
using System;
using System.Diagnostics.CodeAnalysis;

internal static partial class TestEnumExtensions
{
    public static string GetString(this global::TestEnum value) => value switch
    {
        global::TestEnum.None => "None",
        global::TestEnum.Value => "Value",
        _ => value.ToString()
    };

    public static bool TryGetUnderlyingValue(this global::TestEnum value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case global::TestEnum.None:
                underlyingValue = 0;
                return true;
            case global::TestEnum.Value:
                underlyingValue = 1;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this global::TestEnum value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
